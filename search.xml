<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Javaer入门Dart]]></title>
    <url>%2F2018%2F12%2F09%2FJavaer%E5%85%A5%E9%97%A8Dart%2F</url>
    <content type="text"><![CDATA[如果你是一名Java开发人员，可以通过 codelabs 快速入门Dart。 1. 简介Dart是一门用于Flutter的编程语言，而Flutter是Google开发的移动应用SDK。 阅读本文，你将学习到： 如何编写构造方法 为对象赋值的多种方式 如何 &amp; 何时创建getter和setter 如何处理访问权限 如何创建工厂模式 函数式编程 其他主要的概念 此外，codelabs提供了 DartPad 供大家编写Dart代码。 2. 创建一个简单的Dart类我们以一个简单的Bicycle类来进行学习，Bicycle类包含一些私有的成员变量，以及对应的setter和getter。我们尝试编写Bicycle类然后通过main()方法将Bicycle实例打印到控制台。 2.1 启动DartPad现在可以打开 DartPad ，一边编写Dart代码。 2.2 定义Bicycle类在DartPad定义一个Bicycle类，其中包含三个成员变量：cadence、speed和gear。 12345678class Bicycle &#123; int cadence; int speed; int gear;&#125;void main() &#123;&#125; 在上面的代码中，我们定义了Bicycle类，以及一个main()方法，代码相对比较简单。其中有一些Dart和Java的区别需要留意： 区别 Dart Java main()方法 1. 不带参数则定义为void main()，带参数定义为void main(List&lt;String&gt; args) 2. 必须在最外层，位于类外部 1. 定义为public static void main(String[] args) 2. 位于类内部 方法、变量定义 能够位于类外 面向对象语言，所有变量、方法必须位于类内部 访问类型 不支持private、public、protected修饰词，全部类、成员变量和方法默认定义为public 通过修饰词private、public、protected修饰 类成员私有化 成员命名以下划线开始（下一节将学习到） 通过private修饰 缩进 默认使用两个空格 默认使用四个空格 2.3 定义构造方法1Bicycle(this.cadence, this.speed, this.gear); 上面代码便是Dart的构造方法，初次阅读会觉得比较奇怪，但是在Dart： 构造方法没有函数体是允许的！ 如果没函数体的构造方法行末尾漏了分号;，DartPad会提示：A function body must be provided. 在构造方法的参数列表中使用this，是Dart为实例变量赋值的一种快捷方式。也即是等同于以下代码，大家记住可以这么用就可以了。12345Bicycle(int cadence, int speed, int gear) &#123; this.cadence = cadence; this.speed = speed; this.gear = gear;&#125; 2.4 实例化并打印在我们的main()方法中添加实例化的代码：12345678void main() &#123; var bike1 = new Bicycle(2, 1, 0); // ① Bicycle bike2 = new Bicycle(2, 0, 1); // ② var bike3 = Bicycle(2, 0, 1); // ③ final bike4 = Bicycle(2, 0, 1); // ④ print(bike1)&#125; 以上四种实例化方式都是允许的，其中：第二种方式指明类型会加快编译速度，第一种并没有指明类型；在Dart 2之后new可以省略（也就是第三种方式）；如果明确bike4是不变的则可以使用final代替var（第四种方式）。print()就如同Java中的System.out.print()，这里打印结果是Instance of &#39;Bicycle&#39;，如果想要打印具体的信息，需要重写toString()方法（思想与Java一致）：12@overrideString toString() =&gt; &apos;Bicycle: $speed mph&apos;; 这里的重写代码也是有点独特： @overrid同Java一致，表明这是重写类方法，Java中字母o是大写 字符串支持单引号或双引号进行表示 如果要在字符串中插入表达式，则可以使用 ${表达式}，如果是插入成员变量值，可以直接使用 $成员变量 上面包含了一个=&gt;，该符号表示，当方法的实现只有一行代码的时候可以使用=&gt;简写。 2.5 添加只读成员变量并不是所有类成员变量都是对外开放的，有时可能会需要一些私有的成员变量，例如将Bicycle的speed属性定义为私有的，在Java的实现方式便是： 将speed成员变量使用private修饰； 提供speed的getter方法； 而Dart并没有访问修饰词（默认都是public），那如何表示私有化呢？答案是命名使用下划线，如下：123int _speed = 0;## getterint get speed =&gt; _speed; 注意： 未初始化的成员变量默认值都为null，即使是表示数值的变量 Dart编译器会把以下划线开头的成员变量认定为私有private 默认地，Dart为所有public的成员变量隐式提供了对应的setter和getter方法，我们不需要特地去编写对应的setter和getter，除非将变量强制为只读 or 只写，或者在getter or setter中添加额外的操作等。 因为默认成员变量为public，例如Bicycle类的cadence和gear，所以直接通过bike.cadence和bike.gear进行访问 最后，将speed定义为私有后的Bicycle类：123456789101112131415161718192021222324252627class Bicycle &#123; int cadence; int _speed = 0; int get speed =&gt; _speed; int gear; // 构造方法 Bicycle(this.cadence, this.gear); // 刹车 void applyBrake(int decrement) &#123; _speed -= decrement; &#125; // 加速 void speedUp(int increment) &#123; _speed += increment; &#125; @override String toString() =&gt; &apos;Bicycle: $_speed mph&apos;;&#125;void main() &#123; var bike = Bicycle(2, 1); print(bike);&#125; 3. 可选命名参数（替代重载）在Java中，经常会重载方法：也就是编写具有相同函数名，但参数列表不同的多个方法。而Dart不允许重载，并通过可选命名参数代替了重载。现在定义一个矩形类Rectangle，包含三个成员变量：origin、width和height：12345class Rectangle &#123; Point origin; int width; int height;&#125; 如何通过可选命名参数来代替重载，我们以构造方法为例：1Rectangle(&#123;this.origin = const Point(0, 0), this.width = 0, this.height = 0&#125;); 注意可选命名参数必须包含在花括号中{ }，且指定的默认值必须是编译期常量（也就是编译期便可确定值）。又例如：12345// 其中x、y为可选命名参数，r不是void move(int r, &#123;int x = 10, int y = 20&#125;) &#123; this.width += x； this.height += y;&#125; 使用可选命名参数的方法，在调用时可选命名参数必须指明赋值的局部变量，而非可选命名参数则不需要：12345678void main() &#123; // origin是可选命名参数，为其赋值必须在前面指明: origin // width和height同理 print(Rectangle(origin: const Point(10, 20), width: 100, height: 200)); print(Rectangle(origin: const Point(10, 10))); print(Rectangle(width: 200)); print(Rectangle());&#125; 4. 创建工厂模式这一小节将介绍两种创建Shape的工厂，先介绍一下Shape类：12345678910111213141516171819202122232425262728import &apos;dart:math&apos;;// 抽象类abstract class Shape &#123; // num表示数据类型是数值，可以为int、float或short等 // 定义一个获取面积的getter方法 num get area;&#125;// 圆class Circle implements Shape &#123; final num radius; Circle(this.radius); num get area =&gt; pi * pow(radius, 2);&#125;// 正方形class Square implements Shape &#123; final num side; Square(this.side); num get area =&gt; pow(side, 2);&#125;main() &#123; final circle = Circle(2); final square = Square(2); print(circle.area); print(square.area);&#125; 上面的代码中： Dart支持抽象类（abstract） 在同一个文件中能够定义多个class Dart的核心库包括了：dart.math、dart:core、dart:async、dart:convert和dart:collection 在Dart 1.x版本常量均为大写（例如PI），在Dart 2都改为小写（例如pi） 接下来介绍一下创建工厂模式两种方式。 4.1 顶层方法在所有类的外部创建一个工厂方法：1234567891011121314Shape shapeFactory(String type) &#123; if (type == &apos;circle&apos;) return Circle(2); if (type == &apos;square&apos;) return Square(2); // 如果参数type不是&apos;circle&apos;或&apos;square&apos;将会抛出异常 // 如果想在字符串中添加单引号，可以使用反斜杠\，或整个字符串使用双引号表示 throw &apos;Can\&apos;t create $type.&apos;; &#125;// 前面的main方法就可以改写为：main() &#123; final circle = shapeFactory(&apos;circle&apos;); final square = shapeFactory(&apos;square&apos;); print(circle.area); print(square.area);&#125; 说明一下： Dart同Java一样能够抛出异常，也定义了很多常用的异常类，我们能够继承、使用这些常用的异常类。 Dart支持通过throw一个字符串表示遇到的异常信息：throw &#39;Occurred NPE&#39; Dart同样使用try/catch来进行异常的捕获： 12345try &#123; // exception occurred&#125; catch(err) &#123; print(err);&#125; 4.2 工厂构造器Dart提供了factory关键字用于创建工厂构造器。下面在Shape的抽象类中添加一个工厂构造器：12345678910111213141516abstract class Shape &#123; factory Shape(String type) &#123; if (type == &apos;circle&apos;) return Circle(2); if (type == &apos;square&apos;) return Square(2); throw &apos;Can\&apos;t create $type.&apos;; &#125; num get area;&#125;main() &#123; // 调用工厂构造器，通过创建Shape对象即可 final circle = Shape(&apos;circle&apos;); final square = Shape(&apos;square&apos;); print(circle.area); print(square.area);&#125; 5. 实现接口Dart同样也有接口的思想，但Dart并没有interface的关键字，因为每个类都被定义为接口，也就是一个类，既能被当成父类进行继承extends，也能当做接口进行实现implements：12345678910class A &#123;&#125;// 此时A作为父类被继承class B extends A &#123;&#125;// 此时A作为接口被实现class C implements A &#123;&#125; 我们定义一个CircleMock实现我们上面的Circle类：1234567class Circle implements Shape &#123; final num radius; Circle(this.radius); num get area =&gt; pi * pow(radius, 2);&#125;class CircleMock implements Circle &#123;&#125; 此时DartPad会提示编译错误：Error: The non-abstract class &#39;CircleSub&#39; is missing implementations for these members: &#39;radius&#39;, &#39;area&#39;.，编译出错可以这么理解：123456789101112// Circle被作为了接口实现class Circle implements Shape &#123; // num radius、num get area被视为接口中的方法，需要被实现 final num radius; num get area =&gt; pi * pow(radius, 2);&#125;class CircleMock implements Circle &#123; // 可以通过定义相关的成员变量，编译器也不会报错（这里有点莫名其妙啊） num area; num radius;&#125; 6. 函数式编程在函数式编程中，可以把方法作为为参数、将方法赋值给变量、支持lambda表达式。Dart支持函数式编程，所以也支持以上提到的特点，此外，Dart中方法也是一个对象，且具有对应的类型Function，因此Dart中可以将方法赋值给变量或传递给参数。 6.1 类实例作为方法调用Dart还可以将类实例作为方法一样调用（但该类必须包含call()方法），例如：1234567891011class WannabeFunction &#123; // call方法返回值为void，省略了void call(String a, String b, String c) =&gt; &apos;$a $b $c!&apos;;&#125;main() &#123; var wf = new WannabeFunction(); // 将WannabeFunction类的实例wf作为方法一样调用，此时调用的是WannabeFunction类中的call方法 var out = wf(&quot;Hi&quot;,&quot;there,&quot;,&quot;gang&quot;); print(&apos;$out&apos;);&#125; 6.2 命令式代码（非功能性）12345678String scream(int length) =&gt; &quot;A$&#123;&apos;a&apos; * length&#125;h!&quot;;main() &#123; final values = [1, 2, 3, 5, 10, 50]; for (var length in values) &#123; print(scream(length)); &#125;&#125; 打印的结果是：123456Aah!Aaah!Aaaah!Aaaaaah!Aaaaaaaaaaah!Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaah! 上面使用了字符串插值器A${&#39;a&#39; * length}h!，表示将a字母重复length次。 6.3 将命令式代码转化为功能性代码我们将上面的代码的for(){ }循环使用方法链的形式进行替换：123456789String scream(int length) =&gt; &quot;A$&#123;&apos;a&apos; * length&#125;h!&quot;;main() &#123; final values = [1, 2, 3, 5, 10, 50]; // for (var length in values) &#123; // print(scream(length)); // &#125; values.map(scream).forEach(print); // 下面解释该行代码&#125; 上面的代码挺难理解的，可以这么理解： map可以理解为一个迭代器，values.map()便是对values中的数值进行迭代，迭代所做的操作就交由map()方法的参数，这里传入的就是scream，也就是scream()方法，用Java代码表示便是： 123456// for相当于map，进行迭代for (int val : values) &#123; // map()的参数便是对迭代进行的操作 // 这里便是调用scream()方法，因为函数式编程中方法可以作为参数进行传递 scream(val);&#125; forEach()可以理解为对处理结果进行的最后操作，例如打印（传入print方法）。forEach()这个在Java 8也已支持。 综上，values.map(scream).forEach(print);这行代码意思便是，对values进行遍历，对其中每一个值进行scream()处理，然后调用print()进行处理后的最后操作。 6.4 集合的新功能点Dart在dart:collection库中还包含了一些迭代的新功能点，例如fold、where、join和skip等：12// values.map(scream).forEach(print);values.skip(1).take(3).map(scream).forEach(print); 打印的结果：123Aaah!Aaaah!Aaaaaah! 其中： skip(1)表示遍历values时跳过第一个 take(3)表示遍历时，获取接下来的三个值，剩下的值忽略掉 map()和forEach()如上面解释，进行遍历和处理 7. 写在最后以上是关于Java和Dart的一些区别，只要会Java上手Dart应该还是比较简单的。但上面也只讲了一小部分内容，尚未包括异步/同步、方法级联、Null操作。当然，笔者个人觉得，并不需要要完全学习完Dart才能上手Flutter，学习一下基本的Dart，在Flutter中一边摸索中一边学习Dart应该是最合适的。codelabs上面还提供了一些学习的链接：文章： Why Flutter Uses Dart Announcing Dart 2: Optimized for Client-Side Development Why I moved from Java to Dart 资源： A Tour of the Dart Language A Tour of the Dart Libraries Effective Dart 网页： Dart Language: www.dartlang.org Dart for the web, including AngularDart: webdev.dartlang.org Flutter mobile app SDK: flutter.io]]></content>
      <categories>
        <category>Dart</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Dart</tag>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04安装VMWare Workstation]]></title>
    <url>%2F2018%2F03%2F07%2FUbuntu16.04%E5%AE%89%E8%A3%85VMWare%20Workstation%2F</url>
    <content type="text"><![CDATA[一、安装过程1. 安装开发工具1$ sudo apt install build-essential 2. 下载从VMWare的官网http://www.vmware.com/go/tryworkstation-linux-64 下载，文件类型是.bundle。此时下载的版本是Vmware Workstation 14。 3. 安装VMWare12$ chmod a+x VMware-Workstation-Full-14.1.1-7528167.x86_64.bundle$ sudo ./VMware-Workstation-Full-14.1.1-7528167.x86_64.bundle 执行后会出现VMWare的安装窗口，需要同意协议、选择是否在启动时检查更新等操作，最后安装完成。 4. 启动VMWare在终端启动，或者在菜单启动1$ vmware 5. 激活密钥网上找的VMware workstation 14永久激活密钥：123456789CG54H-D8D0H-H8DHY-C6X7X-N2KG6ZC3WK-AFXEK-488JP-A7MQX-XL8YFAC5XK-0ZD4H-088HP-9NQZV-ZG2R4ZC5XK-A6E0M-080XQ-04ZZG-YF08DZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8FF590-2DX83-M81LZ-XDM7E-MKUT4FF31K-AHZD1-H8ETZ-8WWEZ-WUUVACV7T2-6WY5Q-48EWP-ZXY7X-QGUWDAALYG-20HVE-WHQ13-67MUP-XVMF3 6. 卸载VMWare1$ sudo vmware-installer --uninstall-product vmware-workstation 二、解决could not open /dev/vmmon no such file or directory问题1. 方法1123456$ cd /tmp$ tar -xzvf /usr/lib/vmware/modules/source/vmmon.tar$ cd vmmon-only/$ make$ sudo cp vmmon.ko /lib/modules/4.4.0-116-generic/misc/vmmon.ko$ sudo modprobe vmmon 如果执行tar解压时候出现：123gzip: stdin: not in gzip formattar: Child returned status 1tar: Error is not recoverable: exiting now 则将上面tar -xzvf /usr/lib/vmware/modules/source/vmmon.tar命令改为：tar xvf /usr/lib/vmware/modules/source/vmmon.tar 执行完上面的步骤之后，启动虚拟机，看是否解决了问题。 参考：https://communities.vmware.com/message/2442783 2. 方法2可能出现的原因和gcc版本有关，所以查看自己gcc的版本：12345$ gcc --versiongcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609Copyright (C) 2015 Free Software Foundation, Inc.This is free software; see the source for copying conditions. There is NOwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 如果gcc版本太低，例如4.5（4.6及以上应该没问题），则安装新版本的gcc，例如：123$ sudo apt install gcc-5$ sudo rm /usr/bin/gcc$ sudo ln -s /usr/bin/gcc-5 /usr/bin/gcc 确认更新gcc版本之后，执行：1$ sudo vmware-modconfig --console --install-all 如果最后出现以下结果则表示成功。12345678Starting VMware services: Virtual machine monitor done Virtual machine communication interface done VM communication interface socket family done Blocking file system done Virtual ethernet done VMware Authentication Daemon done Shared Memory Available done 如果最后执行结果中出现了如下的failed，则关闭BIOS中的secure boot，然后再执行：sudo vmware-modconfig --console --install-all12345678Starting VMware services: Virtual machine monitor failed Virtual machine communication interface done VM communication interface socket family done Blocking file system done Virtual ethernet failed VMware Authentication Daemon done Shared Memory Available done 参考：https://communities.vmware.com/message/2611517#2611517]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>VMWare Workstation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu搭载Android开发环境（无需翻墙）]]></title>
    <url>%2F2017%2F11%2F27%2FUbuntu%E6%90%AD%E8%BD%BDAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%88%E6%97%A0%E9%9C%80%E7%BF%BB%E5%A2%99%EF%BC%89%2F</url>
    <content type="text"><![CDATA[一、相关下载的地址 sdk下载 郑州大学：https://mirrors.zzu.edu.cn/android/repository/ 大连东软信息学院：http://mirrors.neusoft.edu.cn/android/repository/ Android studio Android Studio 中文社区(官网)：http://www.android-studio.org/ 二、下载SDK相关包新建SDK目录，SDK的目录下面用$SDK表示： 在$SDK下新建build-tools、tools、platform-tools、platforms四个文件夹。 下载build-tools 找到对应的平台，例如linux、macosx、windows等 解压下载的zip包，解压后得到android-6.0或23.0.1，放到$SDK/build-tools/目录下 下载sdk tools 找到对应的平台，例如linux、macosx、windows等 解压下载的zip包，解压后得到tools，直接放到$SDK/目录下 下载platform-tools 找到对应的平台，例如linux、macosx、windows等 解压下载的zip包，解压后得到platform-tools，直接放到$SDK/目录下 下载sdk 找到对应API的zip包，例如android-23_r02.zip（23_r03之前名字）或platform-23_r03.zip（23_r03及之后的名字），不分平台 解压下载的zip包，解压后得到android-6.0，放到$SDK/platforms/目录下 三、安装Android Studio 解压Android Studio的压缩包，Studio的目录下面用$STUDIO表示 cd到$STUDIO/bin目录，通过./studio.sh启动Studio 如果启动Studio的时出现Unable to access android sdk add-on list的问题，在$STUDIO/bin/idea.properties文件末尾添加：disable.android.first.run=true即可。 进入Studio。 四、其他问题说明：Studio的log文件在用户目录下$HOME/.AndroidStudio2.3/system/log中，其中目录可能因为Studio的版本不同而名字不同，例如.AndroidStudioPreview3.1。有问题均可查看该日志文件。 Error:Failed to find target with hash string &#39;android-26&#39; in $SDK的问题这个问题很可能是因为compileSdkVersion设置为26，也就是platforms目录下缺少Android8.0（API 26）。下载API 26并解压到platforms目录下即可。 Error:Failed to find Build Tools revision 27.0.1缺少build-tools 27.0.1的版本，下载对应的zip包，解压到build-tools即可]]></content>
      <categories>
        <category>Ubuntu</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Android</tag>
        <tag>开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wine安装最新版QQ]]></title>
    <url>%2F2017%2F11%2F26%2Fwine%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88QQ%2F</url>
    <content type="text"><![CDATA[1. 安装wine本次教程只需要安装最新版本的wine，并不需要winetricks、wine-mono、wine-gecko等其他插件，目前经实际测试发现只运行WineQQ可以不需要wine-mono、wine-gecko、W2KSP4.exe、InstMsiW.exe等。 安装wine步骤如下：123456$ sudo dpkg --add-architecture i386$ wget https://dl.winehq.org/wine-builds/Release.key$ sudo apt-key add Release.key$ sudo apt-add-repository https://dl.winehq.org/wine-builds/ubuntu/$ sudo apt-get update$ sudo apt-get install --install-recommends winehq-stable 至此wine安装完成，可以通过wine --version查看版本号（此时安装的是wine2.0.3）。 接下来需要执行winecfg来配置wine，接着会弹出安装wine-mono和wine-gecko的窗口，可以不用安装，关掉即可。 2. 配置wine 执行winecfg打开wine的配置窗口 点击Libraries 在New override for library中分别输入*ntoskrnl.exe、*riched20、*txplatform.exe，然后回车（名字前的*号可以省略）。 在Existing_overrides新出现的*ntoskrnl.exe和*txplatform.exe，分别点击Edit，均选择Disable；*riched20点击Edit，选择native then builtin 如果不配置riched20的话则安装好QQ后无法输入用户名 不停用txplatform.exe则WineQQ无法完整退出，导致关掉重开后提示QQ文件被占用 禁用ntoskrnl.exe是为了规避可能出现QQ无法启动的bug。 3. 解决乱码问题 初始配置运行winecfg，在Applications标签下把模拟的windows系统设置为windows xp 准备字体把Windows目录下的字体simsun.ttc复制到/usr/share/fonts/windows里面 在~/.wine/drive_c/windows/Fonts目录中创建两个符号链接： 12$ ln -s /usr/share/fonts/windows/simsun.ttc simsun.ttc$ ln -s /usr/share/fonts/windows/simsun.ttc simfang.ttc 修改~/.wine/system.reg 查找LogPixels，找到的行内容应该是：[System\\CurrentControlSet\\Hardware Profiles\\Current\\Software\\Fonts]将其中的&quot;LogPixels&quot;=dword:00000060改为：&quot;LogPixels&quot;=dword:00000070 查找FontSubstitutes，找到的行应该是：[Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes]将其中的：&quot;MS Shell Dlg&quot;=&quot;Tahoma&quot; &quot;MS Shell Dlg 2″=&quot;Tahoma&quot;改为：&quot;MS Shell Dlg&quot;=&quot;SimSun&quot; &quot;MS Shell Dlg 2″=&quot;SimSun&quot; 修改~/.wine/drive_c/windows/win.ini在末尾添加如下内容： 12345[Desktop]menufontsize=13messagefontsize=13statusfontsize=13IconTitleSize=13 把以下代码保存为zh.reg，然后执行regedit zh.reg 1234567891011121314151617181920212223242526REGEDIT4[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]"Arial"="simsun""Arial CE,238"="simsun""Arial CYR,204"="simsun""Arial Greek,161"="simsun""Arial TUR,162"="simsun""Courier New"="simsun""Courier New CE,238"="simsun""Courier New CYR,204"="simsun""Courier New Greek,161"="simsun""Courier New TUR,162"="simsun""FixedSys"="simsun""Helv"="simsun""Helvetica"="simsun""MS Sans Serif"="simsun""MS Shell Dlg"="simsun""MS Shell Dlg 2"="simsun""System"="simsun""Tahoma"="simsun""Times"="simsun""Times New Roman CE,238"="simsun""Times New Roman CYR,204"="simsun""Times New Roman Greek,161"="simsun""Times New Roman TUR,162"="simsun""Tms Rmn"="simsun" 4. 安装QQ 官网下载最新版QQ 使用wine进行安装： 1$ wine QQ8.9.3.exe 运行QQ 1$ wine $HOME/.wine/drive_c/Program\ Files\ \(x86\)/Tencent/QQ/Bin/QQ.exe 注意上面的$HOME为自己home目录。 5. 创建桌面图标创建以下内容的desktop文件：123456789[Desktop Entry]Version=1.0Type=ApplicationName=Tencent QQIcon=$HOME/Pictures/qq.pngExec=wine $HOME/.wine/drive_c/Program\ Files\ \(x86\)/Tencent/QQ/Bin/QQ.exeComment=QQCategories=Network;InstantMessaging;Terminal=false 注意：上面的$HOME改为自己的home目录路径，Icon的图标需要自己下载并放到本地。 将上面的文件名保存为QQ.desktop（文件后缀为desktop），修改权限为664，然后放到：$HOME/.local/share/applications/目录下，也可以直接将该文件拖到启动栏。 6. 存在的问题 无法保存密码； 页面部分字体会乱码（变成方框）； 无法输入中文（fcitx输入法，包括搜狗）：这一点很蛋疼，但有的人不会出现。可能解决方案： 卸载ibus，但亲测卸载ibus会把unity也一同卸载，所以不可行； 把要输入的文字在其他软件中（如gedit）编写，然后粘贴到聊天框； 7. 参考https://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=30511]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>wine</tag>
        <tag>QQ</tag>
      </tags>
  </entry>
</search>
